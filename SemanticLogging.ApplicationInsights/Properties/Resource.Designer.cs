//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FullScale180.SemanticLogging.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resource() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("FullScale180.SemanticLogging.Properties.Resource", typeof(Resource).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument is empty.
        /// </summary>
        internal static string ArgumentIsEmptyError {
            get {
                return ResourceManager.GetString("ArgumentIsEmptyError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size of &apos;{0}&apos; should be greater or equal to &apos;{1}&apos;..
        /// </summary>
        internal static string ArgumentNotGreaterOrEqualTo {
            get {
                return ResourceManager.GetString("ArgumentNotGreaterOrEqualTo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size of &apos;{0}&apos; should be lower or equal to &apos;{1}&apos;..
        /// </summary>
        internal static string ArgumentNotLowerOrEqualTo {
            get {
                return ResourceManager.GetString("ArgumentNotLowerOrEqualTo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid arguments combination for buffering interval and count. Please specify valid range values for count and interval parameters..
        /// </summary>
        internal static string InvalidBufferingArguments {
            get {
                return ResourceManager.GetString("InvalidBufferingArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value does not represent a connection string.
        /// </summary>
        internal static string InvalidConnectionStringError {
            get {
                return ResourceManager.GetString("InvalidConnectionStringError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The date time format is invalid..
        /// </summary>
        internal static string InvalidDateTimeFormatError {
            get {
                return ResourceManager.GetString("InvalidDateTimeFormatError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The index name must not contain uppercase, whitespace, or any of the following characters \ /*?&quot;&lt;&gt;|.
        /// </summary>
        internal static string InvalidElasticsearchIndexNameError {
            get {
                return ResourceManager.GetString("InvalidElasticsearchIndexNameError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A file name with a relative path is not allowed. Provide only the file name or the full path of the file..
        /// </summary>
        internal static string InvalidNavigationPathInFileNameError {
            get {
                return ResourceManager.GetString("InvalidNavigationPathInFileNameError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The valid range for &apos;{0}&apos; is from 0 to 24.20:31:23.647.
        /// </summary>
        internal static string TimeSpanOutOfRangeError {
            get {
                return ResourceManager.GetString("TimeSpanOutOfRangeError", resourceCulture);
            }
        }
    }
}
